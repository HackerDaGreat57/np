#!/bin/bash
# Build script for cpp_playground

rootdir=$(pwd) # Current directory, for reference (this will serve as our "home")
projectname=cpp_playground

xit() {
	if [ $noformat == 0 ]; then
		printf "\033[0m" # Reset terminal colors for dumb shells
	fi
	exit 0
}

nprint() { # printf with rudimentary line wrapping
	txt=$1
	if [ $noformat == 0 ]; then
		printf "$txt" | fmt -s -w $(tput cols) -g $(tput cols)
	else
		printf "$txt" | fmt -s -w $(tput cols) -g $(tput cols) | sed $'s/\033\[[0-9;]*m//g'
	fi
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  nprint "This is the build script for \033[1m${projectname}\033[0m.
Make sure to regenerate this script every time \033[38;2;57;255;60m.np/project.json\033[0m is modified.\n
\033[4mGeneral options:\033[0m
  -h | --\033[4mh\033[0melp\t\tdisplay this help page

\033[4mBuild options:\033[0m
  \033[1m-b | --\033[4mb\033[0m\033[1muild\t\tbuild the project, recompiling only changed source files (this executes even if no arguments are passed)\033[0m
  -v | --\033[4mv\033[0merify\t\tensure that current hashes of all source files match hashes saved during last build
  -f | --\033[4mf\033[0morce-rebuild\tforce rebuild something even if the source code hasn't changed from the last build. If \033[38;2;225;225;225m[OBJECT]\033[0m is empty it rebuilds everything: all configurations, bundles, megabundles, and libraries.
              \033[38;2;225;225;225m[OBJECT]\033[0m\tspecify specific thing(s) to rebuild in \033[38;2;225;225;225m[OBJECT]\033[0m. This could be a configuration, bundle, megabundle, or a library. Separate multiple objects with a comma.
              \t\tyou can also pass \033[38;2;141;218;255m{objecttype}\033[0m to \033[38;2;225;225;225m[OBJECT]\033[0m rebuild all objects of a specific type; so \033[38;2;128;255;57m./buildscript -f {configurations}\033[0m would rebuild all configurations, and nothing else. Separate multiple object types with a comma.
" | less
  xit
fi
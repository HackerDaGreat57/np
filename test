#!/bin/bash

noformat=0 # Just for compatibility

nprint() { # printf with optimized line wrapping
  printf "nprint: init"

  lines=()
  while IFS= read -r line; do # Read each line into a separate variable
    lines+=("$line")
  done <<< $(printf "$@") # printf %<blah blah> replacement is done before feeding the output to the array.

  for ((i = 0; i < ${#lines[@]}; i++)); do # We will be wrapping each input line separately
    if [ $i -gt $(((${#lines[@]}+1) / 2)) ]; then # This is a fix for a very strange bug that caused nprint to print stuff *twice*
      break
    fi

    printf "\r\e[0Knprint: line $i"

    currentline=$(printf "%b" "${lines[i]}" | sed $'s/\033\[[0-9;]*m//g')
    currentlinelength=${#currentline}

    if [ "$currentlinelength" -le "$(tput cols)" ]; then
      printf "\r\e[0Knprint: skipping"
      printf "\r\e[0K%b" "${lines[i]}\n"
    else
      printf "\r\e[0Knprint: wrapping $i"
 
      matches=$(grep -b -o "[ /\\\-]" <<< "$currentline") # Find all split points
      #reversed_string=$(printf "%s" "$currentline" | tac -rs '.')
      #reversed_length=${#reversed_string}
      reversed_length=$currentlinelength
      echo

      index=0
      while IFS=':' read -r byte_offset _; do
        byte_offset=${byte_offset%:*}  # Remove the trailing colon
        char_position=$(awk -v offset="$byte_offset" -v len="$length" 'BEGIN{print offset + len - 1}')
        printf "Split point %d: %d\n" "$((++index))" "$char_position"
        if [[ $char_position -le $(tput cols) ]]; then
          printf "$char_position is a valid split point.\n"
        fi
      done <<< "$matches"
    fi
  done

  # if [ $noformat == 0 ]; then
  #   printf "$@" | fmt -s -w $((longestline)) -g $((longestline)) # fmt wraps lines neatly if terminal width is less than optimal
  # else
  #   printf "$@" | fmt -s -w $((longestline)) -g $((longestline)) | sed $'s/\033\[[0-9;]*m//g' # Remove all formatting escape sequences if noformat=1
  # fi
}

nprint "Lorem ipsum dolor sit amet, const adelpicier elait hmmmmddd u3jh5uk3h5u 3u5h3uih5u3h5u3h5ui3h5  53uh5iu3h5i3h5i h35h iu3h5 iu3h5uh3 uh3u h3iu5hui 3hk
\033[38;2;57;255;60m.np/project.json\033[0m written successfully.
__Now, we are doing some heavy testing. This line is exactly 80 characters long.

abc.

%-21b  display the documentation for \033[38;2;157;255;60mproject.json\033[0m (which is used to configure projects created with np)" "-d \033[38;2;225;225;225m|\033[0m --\033[4md\033[0mocumentation
" "-d | --documentation"

#-d | --documentation   display the documentation for project.json (which is used to configure projects created with np)
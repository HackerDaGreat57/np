#!/bin/bash

noformat=0 # Just for compatibility

nprint() { # printf with rudimentary line wrapping
  #twidth=$(($(tput cols)+5)) # fmt likes to keep an extra buffer of about 5 characters to the right, we don't need that.
  
  lines=()
  while IFS= read -r line; do # Read each line into a separate variable
    lines+=("$line")
  done <<< $(printf "$@")

  longestline=0 # Initialize the variable that will hold the length of the longest line recorded so far
  for ((i = 0; i < ${#lines[@]}; i++)); do # Find how long the longest line is
    currentline=$(printf "%b" "${lines[i]}" | sed $'s/\033\[[0-9;]*m//g')
    if [ "$longestline" -lt "${#currentline}" ]; then
      longestline=${#currentline}
      echo "longest line is now $longestline."
    fi
  done

  if [ "$longestline" -lt "$(tput cols)" ]; then
    echo "longestline WAS $longestline"
    longestline=$(tput cols) # If the longest line is below width of the terminal, set it to the width of the terminal
    echo "longestline ISNOW $longestline"
  fi

  if [ $noformat == 0 ]; then
    printf "$@" | fmt -s -w $((longestline)) -g $((longestline)) # fmt wraps lines neatly if terminal width is less than optimal
  else
    printf "$@" | fmt -s -w $((longestline)) -g $((longestline)) | sed $'s/\033\[[0-9;]*m//g' # Remove all formatting escape sequences if noformat=1
  fi
}

nprint "\033[38;2;57;255;60m.np/project.json\033[0m written successfully.
  Now, we are doing some heavy testing. This line is exactly 80 characters long.

abc.

%-51b  display the documentation for \033[38;2;157;255;60mproject.json\033[0m (which is used to configure projects created with np)" "-d \033[38;2;225;225;225m|\033[0m --\033[4md\033[0mocumentation"

echo
echo

printf ".np/project.json written successfully.
  Now, we are doing some heavy testing. This line is exactly 80 characters long.

abc.

%-51b  display the documentation for project.json (which is used to configure projects created with np)" "-d | --documentation" | fmt -s -w $((longestline)) -g $((longestline))
#!/bin/bash

noformat=0 # Just for compatibility
#rm c
#rm m

nprint() { # printf with optimized line wrapping
  printf "nprint: init\n"

  lines=()
  while IFS= read -r line; do # Read each line into a separate variable
    lines+=("$line")
  done <<< $(printf "$@") # printf %<blah blah> replacement is done before feeding the output to the array.

  # for ((i = 0; i < ${#lines[@]}; i++)); do
  #   printf "\b${lines[i]}\n"
  # done
  for ((i = 0; i < ${#lines[@]}; i++)); do # We will be wrapping each input line separately
    if [ $i -gt $(((${#lines[@]}+1) / 2)) ]; then # This is a fix for a very strange bug that caused nprint to print stuff *twice*
      break
    fi

    printf "nprint: line $i\n"

    currentline=$(printf "${lines[i]}\n" | sed $'s/\033\[[0-9;]*m//g')
    currentlinelength=${#currentline}

    if [ "$currentlinelength" -le "$(tput cols)" ]; then
      printf "nprint: skipping\n"
      printf "%b\n" "${lines[i]}"
      printf "len: $currentlinelength\n"
    else
      printf "nprint: wrapping $i"
      echo
 
      matches=$(grep -z -b -o "[/\\\ -]" <<< "$currentline") # Find all split points

      #matches=$(grep -b -o "[ /\\\-]" <<< "$currentline")
      echo $currentline > c$i
      echo $matches > m$i

      index=0
      while IFS=':' read -r position _; do
        printf "Split point %d: %d\n" "$((++index))" "$position"
      done <<< "$matches"
    fi
  done
}

nprint "Lorem-ipsum dolor\sit/amet, const adealpicier eait hmmmmddd u3jh5uk3h5u 3u5h3uih5u3h5u3h5ui3h5  53uh5iu3h5i3h5i h35h iu3h5 iu3h5uh3 uh3u h3iu5hui 3hk
\033[38;2;57;255;60m.np/project.json\033[0m written successfully.

%-21b  aaaaaaaadisplay the adealpicier eait hmmmmddd documentation for \033[38;2;157;255;60mproject.json\033[0m (which is used to configure projects created with np)

__Now, we are doing some heavy testing. This line is exactly 80 characters long.

abcd.

junk
this
sa
sss" "-d | --documentationaaaaaaaaaaaaaaa"

#-d | --documentation  display the documentation for project.json (which is used to configure projects created with np)
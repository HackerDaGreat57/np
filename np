#!/bin/bash
# np: New Project C/C++ build system
# Run with --help for help!

#noformat=1 # Uncomment this to disable all formatting even if writing to tty.

scriptversion=v0.0.1.0
rootdir=$(pwd) # Current directory, for reference (this will serve as our "home")

if [[ $noformat != 1 ]]; then # If the user uncommented line 5 then there's no need for this check.
  if [ -t 1 ]; then # If writing output to anywhere that isn't a tty, don't use formatting
    noformat=0
  else
    noformat=1
  fi
fi

nprint() { # printf with rudimentary line wrapping
  txt=$1
  if [ $noformat == 0 ]; then
    printf "$txt" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" | fmt -s -w $(tput cols) -g $(tput cols) # fmt wraps lines neatly if terminal width is less than optimal
  else
    printf "$txt" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" | fmt -s -w $(tput cols) -g $(tput cols) | sed $'s/\033\[[0-9;]*m//g' # Remove all formatting escape sequences if noformat=1
  fi
}

xit() { # exit but with a bit of additional clean-up
  if [ $noformat == 0 ]; then
    printf "\033[0m" # Reset terminal colors for dumb shells
  fi
  exit 0
}

# Embedded files (decoded from base64 just before writing to disk)
project_json=$(cat <<EOF
ewogICJwcm9qZWN0bmFtZSI6ICJucF9uYW1lIiwKICAiY3N0ZHZlcnNpb24iOiAibnBfY3N0ZHZlciIsCiAgImNwcHN0ZHZlcnNpb24iOiAibnBfY3Bwc3RkdmVyIiwKICAidGhyZWFkcyI6IDAsCiAgImNvbmZpZ3VyYXRpb25zIjogWwogICAgewogICAgICAiY29uZmlnbmFtZSI6ICJucF9jb25mbmFtZSIsCgkJCSJ0eXBlIjogIm5wX3R5cGUiLAogICAgICAib3MiOiAibnBfb3MiLAogICAgICAiYXJjaCI6ICJucF9hcmNoIiwKICAgICAgImdjYyI6ICJucF9nY2MiLAogICAgICAiZysrIjogIm5wX2dwcCIsCiAgICAgICJiaW5kaXIiOiAibnBfYmluZGlyIiwKICAgICAgIm9iamRpciI6ICJucF9vYmpkaXIiLAogICAgICAiZ2NjYXJncyI6IFsKICAgICAgICAibnBfZ2NjYXJncyIKICAgICAgXSwKICAgICAgImdwcGFyZ3MiOiBbCiAgICAgICAgIm5wX2dwcGFyZ3MiCiAgICAgIF0sCiAgICAgICJzb3VyY2VmaWxlcyI6IFsKICAgICAgICAibnBfc3JjZmlsZXMiCiAgICAgIF0sCiAgICAgICJjaW5jbHVkZWRpcnMiOiBbCiAgICAgICAgIm5wX2NpbmNzIgogICAgICBdLAogICAgICAiY3BwaW5jbHVkZWRpcnMiOiBbCiAgICAgICAgIm5wX2NwcGluY3MiCiAgICAgIF0sCiAgICAgICJsaWJkaXJzIjogWwogICAgICAgICJucF9saWJkaXJzIgogICAgICBdLAogICAgICAibGRhcmdzIjogWwogICAgICAgICJucF9sZGFyZ3MiCiAgICAgIF0sCiAgICAgICJsZGxpYnMiOiBbCiAgICAgICAgIm5wX2xkbGlicyIKICAgICAgXSwKCQkJImFmdGVyY29tcGlsYXRpb25vdmVycmlkZSI6IFsKCQkJCSJucF9hZnRlcmNvbXBpbGF0aW9ub3ZlcnJpZGUiCgkJCV0KICAgIH0KICBdLAogICJkZXBlbmRlbmNpZXMiOiBbCiAgICB7CiAgICAgICJsaWJuYW1lIjogIm5wX2xpYm5hbWUiLAogICAgICAibGlicGF0aCI6ICJucF9saWJwYXRoIiwKICAgICAgImxpYmFyY2hpdmUiOiAibnBfbGliYXJjaGl2ZSIsCiAgICAgICJsaWJkaXIiOiAibnBfbGliZm9sZGVyIiwKICAgICAgImxpYmJ1aWxkY29tbWFuZHMiOiBbCiAgICAgICAgIm5wX2xpYmJ1aWxkY29tbWFuZHMiCiAgICAgIF0sCiAgICAgICJsaWJleGlzdHZlcmlmaWNhdGlvbiI6IFsKICAgICAgICAibnBfbGliZXhpc3R2ZXJpZmljYXRpb24iCiAgICAgIF0sCiAgICAgICJsaWJkb3dubG9hZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImxpYmRvd25sb2FkdXJsIjogIm5wX2xpYmRvd25sb2FkdXJsIiwKICAgICAgICAgICJsaWJhcmNoaXZldHlwZSI6ICJucF9saWJhcmNoaXZldHlwZSIKICAgICAgICB9CiAgICAgIF0KICAgIH0KICBdLAoJImJ1bmRsZXMiOiBbCgkJewoJCQkiYnVuZGxlbmFtZSI6ICJucF9idW5kbGVuYW1lIiwKCQkJImNvbmZpZ3VyYXRpb25zdG9idWlsZCI6IFsKCQkJCSJucF9jb25maWd1cmF0aW9uc3RvYnVpbGQiCgkJCV0KCQl9CgldLAoJIm1lZ2FidW5kbGVzIjogWwoJCXsKCQkJIm1lZ2FidW5kbGVuYW1lIjogIm5wX21lZ2FidW5kbGVuYW1lIiwKCQkJImJ1bmRsZXN0b2J1aWxkIjogWwoJCQkJIm5wX2J1bmRsZXN0b2J1aWxkIgoJCQldCgkJfQoJXSwKICAidnNjb2RlaW50ZWdyYXRpb24iOiBmYWxzZSwKICAidnNjb2RlZm9sZGVyIjogIm5wX3ZzY2YiCn0=
EOF
)
defaults_json=$(cat <<EOF
ewogICJkX3Byb2plY3RuYW1lIjogIm5wX25hbWUiLAogICJkX2NzdGR2ZXJzaW9uIjogIm5wX2NzdGR2ZXIiLAogICJkX2NwcHN0ZHZlcnNpb24iOiAibnBfY3Bwc3RkdmVyIiwKICAiZF90aHJlYWRzIjogMCwKICAiZF9jb25maWd1cmF0aW9ucyI6IFsKICAgIHsKICAgICAgImRfY29uZmlnbmFtZSI6ICJucF9jb25mbmFtZSIsCiAgICAgICJkX29zIjogIm5wX29zIiwKICAgICAgImRfYXJjaCI6ICJucF9hcmNoIiwKICAgICAgImRfZ2NjIjogIm5wX2djYyIsCiAgICAgICJkX2crKyI6ICJucF9ncHAiLAogICAgICAiZF9iaW5kaXIiOiAibnBfYmluZGlyIiwKICAgICAgImRfb2JqZGlyIjogIm5wX29iamRpciIsCiAgICAgICJkX2djY2FyZ3MiOiBbCiAgICAgICAgIm5wX2djY2FyZ3MiCiAgICAgIF0sCiAgICAgICJkX2dwcGFyZ3MiOiBbCiAgICAgICAgIm5wX2dwcGFyZ3MiCiAgICAgIF0sCiAgICAgICJkX3NvdXJjZWZpbGVzIjogWwogICAgICAgICJucF9zcmNmaWxlcyIKICAgICAgXSwKICAgICAgImRfY2luY2x1ZGVkaXJzIjogWwogICAgICAgICJucF9jaW5jcyIKICAgICAgXSwKICAgICAgImRfY3BwaW5jbHVkZWRpcnMiOiBbCiAgICAgICAgIm5wX2NwcGluY3MiCiAgICAgIF0sCiAgICAgICJkX2xpYmRpcnMiOiBbCiAgICAgICAgIm5wX2xpYmRpcnMiCiAgICAgIF0sCiAgICAgICJsZGFyZ3MiOiBbCiAgICAgICAgIm5wX2xkYXJncyIKICAgICAgXSwKICAgICAgImRfbGRsaWJzIjogWwogICAgICAgICJucF9sZGxpYnMiCiAgICAgIF0sCiAgICAgICJkX2FmdGVyY29tcGlsYXRpb25vdmVycmlkZSI6IFsKCQkJCSJucF9hZnRlcmNvbXBpbGF0aW9ub3ZlcnJpZGUiCgkJCV0KICAgIH0KICBdLAogICJkX2RlcGVuZGVuY2llcyI6IFsKICAgIHsKICAgICAgImRfbGlibmFtZSI6ICJucF9saWJuYW1lIiwKICAgICAgImRfbGlicGF0aCI6ICJucF9saWJwYXRoIiwKICAgICAgImRfbGliYXJjaGl2ZSI6ICJucF9saWJhcmNoaXZlIiwKICAgICAgImRfbGliZGlyIjogIm5wX2xpYmZvbGRlciIsCiAgICAgICJkX2xpYmJ1aWxkY29tbWFuZHMiOiBbCiAgICAgICAgIm5wX2xpYmJ1aWxkY29tbWFuZHMiCiAgICAgIF0sCiAgICAgICJkX2xpYmV4aXN0dmVyaWZpY2F0aW9uIjogWwogICAgICAgICJucF9saWJleGlzdHZlcmlmaWNhdGlvbiIKICAgICAgXSwKICAgICAgImRfbGliZG93bmxvYWRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkX2xpYmRvd25sb2FkdXJsIjogIm5wX2xpYmRvd25sb2FkdXJsIiwKICAgICAgICAgICJkX2xpYmFyY2hpdmV0eXBlIjogIm5wX2xpYmFyY2hpdmV0eXBlIgogICAgICAgIH0KICAgICAgXQogICAgfQogIF0sCiAgImRfYnVuZGxlcyI6IFsKCQl7CgkJCSJkX2J1bmRsZW5hbWUiOiAibnBfYnVuZGxlbmFtZSIsCgkJCSJkX2NvbmZpZ3VyYXRpb25zdG9idWlsZCI6IFsKCQkJCSJucF9jb25maWd1cmF0aW9uc3RvYnVpbGQiCgkJCV0KCQl9CgldLAoJImRfbWVnYWJ1bmRsZXMiOiBbCgkJewoJCQkiZF9tZWdhYnVuZGxlbmFtZSI6ICJucF9tZWdhYnVuZGxlbmFtZSIsCgkJCSJkX2J1bmRsZXN0b2J1aWxkIjogWwoJCQkJIm5wX2J1bmRsZXN0b2J1aWxkIgoJCQldCgkJfQoJXSwKICAiZF92c2NvZGVpbnRlZ3JhdGlvbiI6IGZhbHNlLAogICJkX3ZzY29kZWZvbGRlciI6ICJucF92c2NmIgp9
EOF
)
template_cpp=$(cat <<EOF
Ly9tYWluLmNwcDogPGRlc2NyaWJlIHdoYXQgdGhpcyBmaWxlIGRvZXM+CgovL0luY2x1ZGVzCiNpbmNsdWRlIDxpb3N0cmVhbT4gLy9Db25zb2xlIEkvTyBzdHJlYW1zCgppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKSB7CiAgLy9tYWtlIHN0YWxsbWFuIHByb3VkIQoKICByZXR1cm4gMDsKfQ==
EOF
)

defaults_path=~/.config/np/defaults.json # Default defaults.json path

helpmenu() {
  nprint "\033[1mnp ${scriptversion}\033[0m is a C/C++ build system. Our Git repository is located at \033[3m\033[38;2;145;203;255mhttps://github.com/HackerDaGreat57/np\033[0m.
To create a new project, just run \033[38;2;128;255;57mnp\033[0m inside a dedicated directory, and then edit \033[38;2;57;255;60m.np/project.json\033[0m to include details about your project.\n
\033[4mGeneral options:\033[0m
  %-22sdisplay this help page
  -v | --\033[4mv\033[0mersion\tdisplay the version number of the script (${scriptversion})
  -n | --no-\033[4mf\033[0mormatting\tdo not use ANSI formatting in standard output (automatically disabled if not writing to tty)
  -d | --\033[4md\033[0mocumentation\tdisplay the documentation for \033[38;2;57;255;60mproject.json\033[0m (which is used to configure projects created with np)
  -m | --\033[4mm\033[0make-defaults\tcreate a new \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m (overwrites if already existing)
  [PATH]\tSpecify a specific place to put the generated file by typing PATH

\033[4mNew project generation options:\033[0m
  -n | --\033[4mn\033[0mo-defaults\tDon't replace values in \033[38;2;57;255;60mproject.json\033[0m with defaults in \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m
  -o | --\033[4mo\033[0mther-defaults\tUse a defaults file other than \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m.
                               [PATH]\tIf you specify something like \`foobar\` in place of PATH, the script will assume you mean \033[38;2;241;255;71m~/.config/np/foobar.json\033[0m.

\033[4mOptions for existing projects:\033[0m
  -r | --\033[4mr\033[0megenerate\tRegenerate the build script (must be done every time \033[38;2;57;255;60mproject.json\033[0m is modified to reflect changes)
" "-h | --help"
  xit
}

display_documentation() {
  nprint "\033[1m\033[38;2;57;255;60mproject.json\033[0m\033[1m documentation\033[0m:\n
  \033[38;2;141;218;255mprojectname\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the project. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
  \033[38;2;141;218;255mcstdversion\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the C standard version used in the project. Valid versions: \033[38;2;225;225;225mc89,c99,c11,c17,c23,gnu89,gnu99,gnu11,gnu17,gnu23\033[0m.\n
  \033[38;2;141;218;255mcppstdversion\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the C++ standard version used in the project. Valid versions: \033[38;2;225;225;225mc++98,c++03,c++11,c++14,c++17,c++20,c++23,gnu++98,gnu++03,gnu++11,gnu++14,gnu++17,gnu++20,gnu++23.\033[0m\n
  \033[38;2;141;218;255mthreads\033[0m [\033[38;2;215;50;205m\033[3minteger\033[0m]: the number of threads that will be used to compile the project. \033[3mIf it is 0, the script will automatically detect the number of available threads at runtime.\033[0m\n
  \033[38;2;141;218;255mconfigurations\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that each denote a certain build configuration for the project, such as one for arm64 and one for x86_64. \033[1mDocumentation for array entries:\033[0m\n
    \033[38;2;141;218;255mconfigname\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255mtype\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the type of binary being built. Can either be \033[38;2;225;225;225mexe\033[0m or \033[38;2;225;225;225mlib\033[0m; use \033[38;2;225;225;225mexe\033[0m for normal executables, use \033[38;2;225;225;225mlib\033[0m if you're building a library.\n
    \033[38;2;141;218;255mos\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration's OS target. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255march\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration's processor architecture target. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255mgcc\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the name of the gcc binary\n
    \033[38;2;141;218;255mgpp\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the name of the g++ binary\n
    \033[38;2;141;218;255mgccargs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual arguments passed to GCC. Each argument goes in a new entry.\n
    \033[38;2;141;218;255mgppargs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual arguments passed to G++. Each argument goes in a new entry.\n
    \033[38;2;141;218;255msourcefiles\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote paths to individual source code files to be compiled, relative to the root directory of the project (where .np/ is considered a subdirectory). Each file goes in a new entry.\n
    \033[38;2;141;218;255mcincludedirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of headers to be made available to the C compiler. Each directory goes in a new entry.\n
    \033[38;2;141;218;255mcppincludedirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of headers to be made available to the C++ compiler. Each directory goes in a new entry.\n
    \033[38;2;141;218;255mlibdirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of library files to be made available to the linker. Each directory goes in a new entry.\n
    \033[38;2;141;218;255mldargs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual arguments passed to the linker (ld). Each argument goes in a new entry.\n
    \033[38;2;141;218;255mldlibs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote the library files that need to be linked to the executable in -l{name} form. Each file goes in a new entry.\n
    \033[38;2;141;218;255maftercompilationoverride\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual commands being run after compilation. If this array is not empty then the script does not attempt to link the binary manually, and gives you full control of what happens after compilation. Useful for building libraries. After commands in this array are executed, essentially nothing else is left to happen. Can point to a full-fledged script.\n
  \033[38;2;141;218;255mdependencies\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that each denote a certain library that needs to be built from source before the project itself can be built. This is a convenience mechanism and is completely optional to configure, but we recommend you make use of it to prevent \"library not found\"-type errors. \033[1mDocumentation for array entries:\033[0m\n
    \033[38;2;141;218;255mlibname\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly internal name for the library. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255mlibpath\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the path to the library's source code root directory \033[3mif it is not in archive form\033[0m. Relative to the project's root directory. \033[1mUsed instead of the source archive, if both are present.\033[0m\n
    \033[38;2;141;218;255mlibarchive\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the path to the library's source code tarball (only tarballs are supported). It will be extracted into \033[38;2;141;218;255mlibdir\033[0m. If you specify a file that doesn't exist, the script will try to download (HTTP GET) the archive from each entry in \033[38;2;141;218;255mlibdownloads\033[0m, in top-to-bottom order.\n
    \033[38;2;141;218;255mlibdir\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the directory where the source code archive will be extracted to.\n
    \033[38;2;141;218;255mlibbuildcommands\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that each denote individual commands run in \033[38;2;141;218;255mlibpath\033[0m or \033[38;2;141;218;255mlibdir\033[0m (whichever one applies) to build the external library. This can point to a full-fledged shell script.\n
    \033[38;2;141;218;255mlibexistverification\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of paths that each point to individual library files that need to be present. If all of them aren't there then the script will try to build the library again. If all are present then it will proceed to building the next library or building a configuration. You can use \033[38;2;141;218;255mlibpath\033[0m and \033[38;2;141;218;255mlibdir\033[0m as variables by typing them literally inside the paths: \033[38;2;128;255;57m{libpath}\033[0m,\033[38;2;128;255;57m{libdir}\033[0m.\n
    \033[38;2;141;218;255mlibdownloads\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that denote individual URLs that the script can try to download archives from to extract. \033[1mDocumentation for array entries:\033[0m\n
      \033[38;2;141;218;255mlibdownloadurl\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the URL to download the archive from (can be any protocol that \033[38;2;128;255;57mwget\033[0m supports)\n
      \033[38;2;141;218;255mlibarchivetype\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the type of archive that the downloaded file is. Can be one of the following: \033[38;2;225;225;225mtar,bzip2,gzip,zip,7z\033[0m. Make sure you have the proper decompressor installed!!\n
  \033[38;2;141;218;255mbundles\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that each denote a bundle. A bundle is a group of configurations that are built all at once. \033[1mDocumentation for array entries:\033[0m\n
    \033[38;2;141;218;255mbundlename\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the bundle. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255mconfigurationstobuild\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that each contain names of individual configurations to be built in this bundle.\n
  \033[38;2;141;218;255mmegabundles\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that each denote a megabundle. A megabundle is a group of \033[3mbundles\033[0m that are built all at once. \033[1mDocumentation for array entries:\033[0m\n
    \033[38;2;141;218;255mmegabundlename\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the megabundle. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).\n
    \033[38;2;141;218;255mconfigurationstobuild\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that each contain names of individual bundles to be built in this megabundle.\n
  \033[38;2;141;218;255mvscodeintegration\033[0m [\033[38;2;255;141;142m\033[3mboolean\033[0m]: whether to activate integration with Visual Studio Code or not. If true, it will modify \033[38;2;128;255;255m{projectrootdir}/.vscode/tasks.json\033[0m and \033[38;2;128;255;255mlaunch.json\033[0m so the user can build the project with a click of a button in VSCode's Run & Debug UI.\n
  \033[38;2;141;218;255mvscodefolder\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the path to the .vscode folder, which the user can freely modify if it is not located in the root directory\n

In a defaults file, you have to insert a \033[38;2;156;250;255md_\033[0m prefix behind every JSON tag name, but otherwise, just go about business as usual. (\033[38;2;57;255;60mproject.json\033[0m and \033[38;2;241;255;71mdefaults.json\033[0m syntax is completely the same except for the JSON tag prefixes.)\n" | less
  xit
}

make_defaults() { # Create a new defaults file
  mkd_path=${mkd_path:=~/.config/np/defaults.json} # If no path specified, assume default path
  if [[ $mkd_path == *"/"* || $mkd_path == *"\\"* ]]; then # This is a feature that makes selecting defaults files easier. If you enter a full path then it will use that path, but if you just enter a string like 'foo' then the script will assume you mean ~/.config/np/foo.json. Very convenient.
    echo $defaults_json | base64 -d >> $mkd_path
    nprint "Wrote new defaults file to \033[38;2;241;255;71m$mkd_path\033[0m" # Fixed path
  else
    echo $defaults_json | base64 -d >> ~/.config/np/$mkd_path.json
    nprint "Wrote new defaults file to \033[38;2;241;255;71m~/.config/np/$mkd_path.json\033[0m" # Convenience feature
  fi
  xit # That's all we needed to do.
}

use_other_defaults() { # Use a defaults file other than ~/.config/np/defaults.json
  defaults_path=$other_defaults # If the user passed an argument then this will not be null
  defaults_path=${defaults_path:="~/.config/np/defaults.json"} # If null, use default path
  if [[ $defaults_path == *"/"* || $defaults_path == *"\\"* ]]; then # Same convenience feature from make_defaults()
    nprint "Using \033[38;2;241;255;71m$defaults_path\033[0m as defaults file"
  else
    nprint "Using \033[38;2;241;255;71m~/.config/np/$defaults_path.json\033[0m as defaults file"
    defaults_path=~/.config/np/$other_defaults.json
  fi
}

regenerate_buildscript() { # Regenerate the build script for the active project based on data in .np/project.json
  nprint "\033[38;2;255;141;250mRegenerating build script...\033[0m\n"
  # Everything in this code block past this point is temporary; for development purposes ONLY
  rm -rfv .np src
  nprint "\nI deleted the junk for you, run me again!\n"
  xit
}

while test $# -gt 0; do # Argument parsing
  case "$1" in # I have no idea what this does but it works. Don't ask questions
    -h|--help) helpmenu # Display the help menu
      ;;
    -v|--version) nprint "$scriptversion\n" # Display the script version
        xit
      ;;
    -f|--no-formatting) noformat=1 # Disable formatting
      ;;
    -d|--documentation) display_documentation # Display documentation for .np/project.json
      ;;
    -m|--make-defaults) mkd_path=$2 # Create new defaults file, optionally at a specific path
        make_defaults
      ;;
    -n|--no-defaults) dontusedefaults=1 # Don't use a defaults file at all; start project from scratch
      ;;
    -o|--other-defaults) other_defaults=$2 # Use a defaults file other than ~/.config/np/defaults.json
        use_other_defaults
      ;;
    -r|--regenerate) regenerate_buildscript # Regenerate the project's build script based on data in .np/project.json
      ;;
    --*) echo "Unrecognized option $1. Exiting." # Exit if there's an unrecognized or typo'd option
         xit
      ;;
  esac
  shift
done

if [ -f "$rootdir/.np/project.json" ]; then # If the project already exists and no arguments were passed, just regenerate the build script.
  regenerate_buildscript
fi

nprint "No project exists in your current working directory. Would you like to create a new one? \033[1m[Y/n]\033[0m "
read -n 1 -r
if [[ $REPLY =~ ^[Nn]$ ]]; then
  nprint "\nGood day, then.\n"
  xit
fi
if [[ $REPLY =~ ^[Yy]$ ]]; then
  mkdir -p .np
  echo $project_json | base64 -d >> .np/project.json # Extract project.json
  nprint "\n\n\033[38;2;57;255;60m.np/project.json\033[0m written successfully.\n"
  mkdir -p src
  echo $template_cpp | base64 -d >> src/main.cpp # Extract main.cpp
  nprint "\033[38;2;57;237;255msrc/main.cpp\033[0m written successfully.\n"
  [ -f $defaults_path ] && { # If the defaults file exists, attempt to F&R values in .np/project.json with the ones in defaults.
    if [[ $dontusedefaults != 1 ]]; then
      nprint "Attempting to F&R with default values from \033[38;2;241;255;71m$defaults_path\033[0m...\n\n"
      cd .np

      # Project name
      d_projectname=$(jq -r '.d_projectname' $defaults_path)
      if [[ $d_projectname != "null" ]]; then
        jq --tab --arg d_projectname "$d_projectname" '.projectname = $d_projectname' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mproject name\033[0m\n"

      # C standard version
      d_cstdversion=$(jq -r '.d_cstdversion' $defaults_path)
      if [[ $d_cstdversion != "null" ]]; then
        jq --tab --arg d_cstdversion "$d_cstdversion" '.cstdversion = $d_cstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mC standard version\033[0m\n"

      # C++ standard version
      d_cppstdversion=$(jq -r '.d_cppstdversion' $defaults_path)
      if [[ $d_cppstdversion != "null" ]]; then
        jq --tab --arg d_cppstdversion "$d_cppstdversion" '.cppstdversion = $d_cppstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mC++ standard version\033[0m\n"

      # Number of compilation threads
      d_threads=$(jq -r '.d_threads' $defaults_path)
      if [[ $d_threads != "null" ]]; then
        jq --tab --argjson d_threads "$d_threads" '.threads = $d_threads' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mNumber of compilation threads\033[0m\n"

      # VSCode integration toggle
      d_vscodeintegration=$(jq -r '.d_vscodeintegration' $defaults_path)
      if [[ $d_vscodeintegration == "true" ]]; then
        jq --tab '.vscodeintegration = true' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      else
        jq --tab '.vscodeintegration = false' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mVSCode integration toggle\033[0m\n"

      # VSCode projects folder
      d_vscodefolder=$(jq -r '.d_vscodefolder' $defaults_path)
      if [[ $d_vscodefolder != "null" ]]; then
        jq --tab --arg d_vscodefolder "$d_vscodefolder" '.vscodefolder = $d_vscodefolder' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      nprint "Finished configuring \033[1mVSCode project settings folder\033[0m\n"

      # Build configurations (the hard part)
      if [[ $(jq --tab '.d_configurations[0]' $defaults_path) != "null" ]]; then
        jq '.configurations = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json # Remove the default template configuration if we have defaults.
      fi
      n_iter=-1 # jq array starts with 0, so initialize it wth -1 because it increments every time the loop is executed.
      while true; do
        n_iter=$((n_iter+1))
        if [[ $(jq --tab --arg n_iter $n_iter '.d_configurations[$n_iter|tonumber]' $defaults_path) != "null" ]]; then
          nprint "Copying \033[1mbuild configuration\033[0m #$n_iter...\n"
          ext_config=$(jq --tab --arg n_iter $n_iter '.d_configurations[$n_iter|tonumber]' $defaults_path)
          jq --tab --argjson ext_config "$ext_config" '.configurations += [$ext_config]' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
        else
          echo "No build configurations left to copy."
          break
        fi
      done

      # Libraries (also tough)
      if [[ $(jq --tab '.d_dependencies[0]' $defaults_path) != "null" ]]; then
        jq '.dependencies = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json # Remove the default template configuration if we have defaults.
      fi
      n_iter=-1 # jq array starts with 0, so initialize it wth -1 because it increments every time the loop is executed.
      while true; do
        n_iter=$((n_iter+1))
        if [[ $(jq --tab --arg n_iter $n_iter '.d_dependencies[$n_iter|tonumber]' $defaults_path) != "null" ]]; then
          nprint "Copying \033[1mdependency\033[0m #$n_iter...\n"
          ext_dep=$(jq --tab --arg n_iter $n_iter '.d_dependencies[$n_iter|tonumber]' $defaults_path)
          jq --tab --argjson ext_dep "$ext_dep" '.dependencies += [$ext_dep]' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
        else
          echo "No dependencies left to copy."
          break
        fi
      done

      # Bundles
      if [[ $(jq --tab '.d_bundles[0]' $defaults_path) != "null" ]]; then
        jq '.bundles = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json # Remove the default template configuration if we have defaults.
      fi
      n_iter=-1 # jq array starts with 0, so initialize it wth -1 because it increments every time the loop is executed.
      while true; do
        n_iter=$((n_iter+1))
        if [[ $(jq --tab --arg n_iter $n_iter '.d_bundles[$n_iter|tonumber]' $defaults_path) != "null" ]]; then
          nprint "Copying \033[1mbundle\033[0m #$n_iter...\n"
          ext_dep=$(jq --tab --arg n_iter $n_iter '.d_bundles[$n_iter|tonumber]' $defaults_path)
          jq --tab --argjson ext_dep "$ext_dep" '.bundles += [$ext_dep]' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
        else
          echo "No bundles left to copy."
          break
        fi
      done

      # Megabundles (oooh)
      if [[ $(jq --tab '.d_megabundles[0]' $defaults_path) != "null" ]]; then
        jq '.megabundles = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json # Remove the default template configuration if we have defaults.
      fi
      n_iter=-1 # jq array starts with 0, so initialize it wth -1 because it increments every time the loop is executed.
      while true; do
        n_iter=$((n_iter+1))
        if [[ $(jq --tab --arg n_iter $n_iter '.d_megabundles[$n_iter|tonumber]' $defaults_path) != "null" ]]; then
          nprint "Copying \033[1mmegabundle\033[0m #$n_iter...\n"
          ext_dep=$(jq --tab --arg n_iter $n_iter '.d_megabundles[$n_iter|tonumber]' $defaults_path)
          jq --tab --argjson ext_dep "$ext_dep" '.megabundles += [$ext_dep]' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
        else
          echo "No megabundles left to copy."
          break
        fi
      done

      sed -i "s/\"d_/\"/g" project.json # Remove the d_ prefix from all values
      if [[ $(jq --tab '.d_dependencies | length' $defaults_path) == 0 ]]; then # Remove the template library entry because it's not mandatory
        jq --tab '.dependencies = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      if [[ $(jq --tab '.d_bundles | length' $defaults_path) == 0 ]]; then # Remove the template bundle entry because it's not mandatory
        jq --tab '.bundles = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      if [[ $(jq --tab '.d_megabundles | length' $defaults_path) == 0 ]]; then # Remove the template megabundle entry because it's not mandatory
        jq --tab '.megabundles = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
    fi
  }
  nprint "\n\033[38;2;12;255;34mYour project has been created!\033[0m Use \033[38;2;247;255;30m.np/project.json\033[0m to configure your project. Use \033[38;2;128;255;57mnp -d\033[0m to get documentation about the project configuration file.\nRun \033[38;2;128;255;57mnp -r\033[0m to generate a build script. To build your project, just run the script.\nRemember, you have to regenerate the build script every time you edit \033[38;2;247;255;30m.np/project.json\033[0m!\n"
  xit
fi

xit
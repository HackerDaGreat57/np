#!/bin/bash
#  np: New Project C/C++ build system

rootdir=$(pwd) # Current directory, for reference (this will serve as our "home")

# Embedded files (decoded from base64 just before writing)
project_json=$(cat <<EOF
ewogICJwcm9qZWN0bmFtZSI6ICJucF9uYW1lIiwKICAiY3N0ZHZlcnNpb24iOiAibnBfY3N0ZHZlciIsCiAgImNwcHN0ZHZlcnNpb24iOiAibnBfY3Bwc3RkdmVyIiwKICAiY29uZmlndXJhdGlvbnMiOiBbCiAgICB7CiAgICAgICJjb25maWduYW1lIjogIm5wX2NvbmZuYW1lIiwKICAgICAgIm9zIjogIm5wX29zIiwKICAgICAgImFyY2giOiAibnBfYXJjaCIsCiAgICAgICJnY2MiOiAibnBfZ2NjIiwKICAgICAgImcrKyI6ICJucF9ncHAiLAogICAgICAiZ2NjYXJncyI6IFsKICAgICAgICAibnBfZ2NjYXJncyIKICAgICAgXSwKICAgICAgImdwcGFyZ3MiOiBbCiAgICAgICAgIm5wX2dwcGFyZ3MiCiAgICAgIF0sCiAgICAgICJzb3VyY2VmaWxlcyI6IFsKICAgICAgICAibnBfc3JjZmlsZXMiCiAgICAgIF0sCiAgICAgICJjaW5jbHVkZWRpcnMiOiBbCiAgICAgICAgIm5wX2NpbmNzIgogICAgICBdLAogICAgICAiY3BwaW5jbHVkZWRpcnMiOiBbCiAgICAgICAgIm5wX2NwcGluY3MiCiAgICAgIF0sCiAgICAgICJsaWJkaXJzIjogWwogICAgICAgICJucF9saWJkaXJzIgogICAgICBdLAogICAgICAibGRsaWJzIjogWwogICAgICAgICJucF9sZGxpYnMiCiAgICAgIF0KICAgIH0KICBdLAogICJ2c2NvZGVpbnRlZ3JhdGlvbiI6IGZhbHNlLAogICJ2c2NvZGVmb2xkZXIiOiAibnBfdnNjZiIKfQ==
EOF
)
template_cpp=$(cat <<EOF
Ly9tYWluLmNwcDogPGRlc2NyaWJlIHdoYXQgdGhpcyBmaWxlIGRvZXM+CgovL0luY2x1ZGVzCiNpbmNsdWRlIDxpb3N0cmVhbT4gLy9Db25zb2xlIEkvTyBzdHJlYW1zCgppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKSB7CiAgLy9tYWtlIHN0YWxsbWFuIHByb3VkIQoKICByZXR1cm4gMDsKfQ==
EOF
)

xit() {
  printf "\033[0m"
  exit 0
}

regenerate_buildscript() {
  printf "\nyou probably ran this by mistake. delete .np directory!\n"
  xit
}

if [ -f "$rootdir/.np/project.json" ]; then
  printf "Regenerating build script...\n"
  regenerate_buildscript
  xit
fi

printf "No project exists in your current working directory. Would you like to create a new one? \033[1m[Y/n]\033[0m "
read -n 1 -r
if [[ $REPLY =~ ^[Nn]$ ]]; then
  printf "\nThen why did you launch this script???\n"
  xit
fi
if [[ $REPLY =~ ^[Yy]$ ]]; then
  mkdir -p .np
  echo $project_json | base64 -d >> .np/project.json # Extract project.json
  printf "\n\n\033[38;2;57;255;60m.np/project.json\033[0m written successfully.\n"
  #mkdir -p src
  #echo $template_cpp | base64 -d >> src/main.cpp # Extract main.cpp
  printf "\033[38;2;57;237;255msrc/main.cpp\033[0m written successfully.\n"
  [ -f ~/.config/np/defaults.json ] && {
    printf "\033[38;2;241;255;71m~/.config/np/defaults.json\033[0m exists, attempting to F&R with defaut values...\n"
    cd .np

    # Project name
    d_projectname=$(jq -r '.d_projectname' ~/.config/np/defaults.json)
    if [[ $d_projectname != "null" ]]; then
      jq --tab --arg d_projectname "$d_projectname" '.projectname = $d_projectname' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
    fi
    printf "Finished configuring \033[1mproject name\033[0m\n"
    # C standard version
    d_cstdversion=$(jq -r '.d_cstdversion' ~/.config/np/defaults.json)
    if [[ $d_cstdversion != "null" ]]; then
      jq --tab --arg d_cstdversion "$d_cstdversion" '.cstdversion = $d_cstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
    fi
    printf "Finished configuring \033[1mC standard version\033[0m\n"
    # C++ standard version
    d_cppstdversion=$(jq -r '.d_cppstdversion' ~/.config/np/defaults.json)
    if [[ $d_cppstdversion != "null" ]]; then
      jq --tab --arg d_cppstdversion "$d_cppstdversion" '.cppstdversion = $d_cppstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
    fi
    printf "Finished configuring \033[1mC++ standard version\033[0m\n"
    # VSCode projects folder
    d_vscodefolder=$(jq -r '.d_vscodefolder' ~/.config/np/defaults.json)
    if [[ $d_vscodefolder != "null" ]]; then
      jq --tab --arg d_vscodefolder $d_vscodefolder '.vscodefolder = $d_vscodefolder' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
    fi
    printf "Finished configuring \033[1mVSCode project settings folder\033[0m\n"
  }

  xit
fi

printf "\033[0m"
exit 0
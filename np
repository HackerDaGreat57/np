#!/bin/bash
#  np: New Project C/C++ build system

scriptversion=v0.0.1.0
rootdir=$(pwd) # Current directory, for reference (this will serve as our "home")

xit() {
  printf "\033[0m" # Reset terminal colors for dumb shells
  exit 0
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  printf "\033[1mnp ${scriptversion}\033[0m is a C/C++ build system. Our Git repository is located at https://github.com/HackerDaGreat57/np.
To create a new project, just run \033[38;2;128;255;57mnp\033[0m inside a dedicated directory, and then edit \033[38;2;57;255;60m.np/project.json\033[0m to include details about your project.\n
\033[4mGeneral options:\033[0m
  -h | --help\t\tdisplay this help page
  -v | --version\tdisplay the version number of the script (${scriptversion})
  -d | --documentation\tdisplay the documentation for \033[38;2;57;255;60mproject.json\033[0m (which is used to configure projects created with np)
  -m | --make-defaults\tcreate a new \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m (overwrites if already existing)
                [PATH]\tSpecify a specific place to put the generated file by typing PATH

\033[4mNew project generation options:\033[0m
  -n | --no-defaults\tDon't replace values in \033[38;2;57;255;60mproject.json\033[0m with defaults in \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m
  -o | --other-defaults\tUse a defaults file other than \033[38;2;241;255;71m~/.config/np/defaults.json\033[0m. It doesn't need to be named defaults.json specifically and can be placed anywhere on disk as long as the script has read access.
                 [PATH]\tIf you specify something like \`foobar\` in place of PATH, the script will assume you mean ~/.config/np/foobar.json.

\033[4mOptions for existing projects:\033[0m
  -r | --regenerate\tRegenerate the build script (must be done every time \033[38;2;57;255;60mproject.json\033[0m is modified to reflect changes)
"
  xit
fi

if [[ "$1" == "-v" || "$1" == "--version" ]]; then
  printf "$scriptversion\n"
  xit
fi

if [[ "$1" == "-n" || "$1" == "--no-defaults" ]]; then
  dontusedefaults=1
fi

if [[ "$1" == "-o" || "$1" == "--other-defaults" ]]; then
  defaults_path=$2
  defaults_path=${defaults_path:="~/.config/np/defaults.json"}
  if [[ $defaults_path == *"/"* || $defaults_path == *"\\"* ]]; then
    printf "Using \033[38;2;241;255;71m$defaults_path\033[0m as defaults file"
  else
    printf "Using \033[38;2;241;255;71m~/.config/np/$defaults_path.json\033[0m as defaults file"
  fi
fi

if [[ "$1" == "-d" || "$1" == "--documentation" ]]; then
  printf "\033[1m\033[38;2;57;255;60mproject.json\033[0m\033[1m documentation\033[0m:
  \033[38;2;141;218;255mprojectname\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the project. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).
  \033[38;2;141;218;255mcstdversion\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the C standard version used in the project. Valid versions: c89,c99,c11,c17,c23,gnu89,gnu99,gnu11,gnu17,gnu23.
  \033[38;2;141;218;255mcppstdversion\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the C++ standard version used in the project. Valid versions: c++98,c++03,c++11,c++14,c++17,c++20,c++23,gnu++98,gnu++03,gnu++11,gnu++14,gnu++17,gnu++20,gnu++23.
  \033[38;2;141;218;255mthreads\033[0m [\033[38;2;215;50;205m\033[3minteger\033[0m]: the number of threads that will be used to compile the project.
  \033[38;2;141;218;255mconfigurations\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of JSON objects that each denote a certain build configuration for the project, such as one for arm64 and one for x86_64. You can obviously make multiple configurations, that's why it's an array. \033[1mDocumentation for array entries:\033[0m
    \033[38;2;141;218;255mconfigname\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).
    \033[38;2;141;218;255mos\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration's OS target. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).
    \033[38;2;141;218;255march\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: a short, computer-friendly name for the configuration's processor architecture target. Cannot contain characters other than a-z, A-Z, 0-9, and _ (underscore).
    \033[38;2;141;218;255mgcc\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the name of the gcc binary
    \033[38;2;141;218;255mgpp\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the name of the g++ binary
    \033[38;2;141;218;255mgccargs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual arguments passed to GCC. Each argument goes in a new entry.
    \033[38;2;141;218;255mgppargs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote individual arguments passed to G++. Each argument goes in a new entry.
    \033[38;2;141;218;255msourcefiles\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote paths to individual source code files to be compiled, relative to the root directory of the project (where .np/ is considered a subdirectory). Each file goes in a new entry.
    \033[38;2;141;218;255mcincludedirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of headers to be made available to the C compiler. Each directory goes in a new entry.
    \033[38;2;141;218;255mcppincludedirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of headers to be made available to the C++ compiler. Each directory goes in a new entry.
    \033[38;2;141;218;255mlibdirs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote directories of library files to be made available to the linker. Each directory goes in a new entry.
    \033[38;2;141;218;255mldlibs\033[0m [\033[38;2;30;226;141m\033[3marray\033[0m]: an array of strings that denote the library files that need to be linked to the executable in -l{name} form. Each file goes in a new entry.
  \033[38;2;141;218;255mvscodeintegration\033[0m [\033[38;2;255;141;142m\033[3mboolean\033[0m]: whether to activate integration with Visual Studio Code or not. If true, it will modify {projectrootdir}/.vscode/tasks.json and launch.json so the user can build the project with a click of a button in VSCode's Run & Debug UI.
  \033[38;2;141;218;255mvscodefolder\033[0m [\033[38;2;255;226;141m\033[3mstring\033[0m]: the path to the .vscode folder, which the user can freely modify if it is not located in the root directory
  
In a defaults file, you have to insert a \033[38;2;156;250;255md_\033[0m prefix behind every JSON tag name, but otherwise, just go about business as usual. \033[38;2;57;255;60mproject.json\033[0m and \033[38;2;241;255;71mdefaults.json\033[0m syntax is completely the same except for the JSON tag prefixes.\n"
  xit
fi

# Embedded files (decoded from base64 just before writing to disk)
project_json=$(cat <<EOF
ewogICJwcm9qZWN0bmFtZSI6ICJucF9uYW1lIiwKICAiY3N0ZHZlcnNpb24iOiAibnBfY3N0ZHZlciIsCiAgImNwcHN0ZHZlcnNpb24iOiAibnBfY3Bwc3RkdmVyIiwKICAidGhyZWFkcyI6IDEsCiAgImNvbmZpZ3VyYXRpb25zIjogWwogICAgewogICAgICAiY29uZmlnbmFtZSI6ICJucF9jb25mbmFtZSIsCiAgICAgICJvcyI6ICJucF9vcyIsCiAgICAgICJhcmNoIjogIm5wX2FyY2giLAogICAgICAiZ2NjIjogIm5wX2djYyIsCiAgICAgICJnKysiOiAibnBfZ3BwIiwKICAgICAgImdjY2FyZ3MiOiBbCiAgICAgICAgIm5wX2djY2FyZ3MiCiAgICAgIF0sCiAgICAgICJncHBhcmdzIjogWwogICAgICAgICJucF9ncHBhcmdzIgogICAgICBdLAogICAgICAic291cmNlZmlsZXMiOiBbCiAgICAgICAgIm5wX3NyY2ZpbGVzIgogICAgICBdLAogICAgICAiY2luY2x1ZGVkaXJzIjogWwogICAgICAgICJucF9jaW5jcyIKICAgICAgXSwKICAgICAgImNwcGluY2x1ZGVkaXJzIjogWwogICAgICAgICJucF9jcHBpbmNzIgogICAgICBdLAogICAgICAibGliZGlycyI6IFsKICAgICAgICAibnBfbGliZGlycyIKICAgICAgXSwKICAgICAgImxkbGlicyI6IFsKICAgICAgICAibnBfbGRsaWJzIgogICAgICBdCiAgICB9CiAgXSwKICAidnNjb2RlaW50ZWdyYXRpb24iOiBmYWxzZSwKICAidnNjb2RlZm9sZGVyIjogIm5wX3ZzY2YiCn0=
EOF
)
defaults_json=$(cat <<EOF
ewogICJkX3Byb2plY3RuYW1lIjogIm5wX25hbWUiLAogICJkX2NzdGR2ZXJzaW9uIjogIm5wX2NzdGR2ZXIiLAogICJkX2NwcHN0ZHZlcnNpb24iOiAibnBfY3Bwc3RkdmVyIiwKICAiZF90aHJlYWRzIjogMSwKICAiZF9jb25maWd1cmF0aW9ucyI6IFsKICAgIHsKICAgICAgImRfY29uZmlnbmFtZSI6ICJucF9jb25mbmFtZSIsCiAgICAgICJkX29zIjogIm5wX29zIiwKICAgICAgImRfYXJjaCI6ICJucF9hcmNoIiwKICAgICAgImRfZ2NjIjogIm5wX2djYyIsCiAgICAgICJkX2crKyI6ICJucF9ncHAiLAogICAgICAiZF9nY2NhcmdzIjogWwogICAgICAgICJucF9nY2NhcmdzIgogICAgICBdLAogICAgICAiZF9ncHBhcmdzIjogWwogICAgICAgICJucF9ncHBhcmdzIgogICAgICBdLAogICAgICAiZF9zb3VyY2VmaWxlcyI6IFsKICAgICAgICAibnBfc3JjZmlsZXMiCiAgICAgIF0sCiAgICAgICJkX2NpbmNsdWRlZGlycyI6IFsKICAgICAgICAibnBfY2luY3MiCiAgICAgIF0sCiAgICAgICJkX2NwcGluY2x1ZGVkaXJzIjogWwogICAgICAgICJucF9jcHBpbmNzIgogICAgICBdLAogICAgICAiZF9saWJkaXJzIjogWwogICAgICAgICJucF9saWJkaXJzIgogICAgICBdLAogICAgICAiZF9sZGxpYnMiOiBbCiAgICAgICAgIm5wX2xkbGlicyIKICAgICAgXQogICAgfQogIF0sCiAgImRfdnNjb2RlaW50ZWdyYXRpb24iOiBmYWxzZSwKICAiZF92c2NvZGVmb2xkZXIiOiAibnBfdnNjZiIKfQ==
EOF
)
template_cpp=$(cat <<EOF
Ly9tYWluLmNwcDogPGRlc2NyaWJlIHdoYXQgdGhpcyBmaWxlIGRvZXM+CgovL0luY2x1ZGVzCiNpbmNsdWRlIDxpb3N0cmVhbT4gLy9Db25zb2xlIEkvTyBzdHJlYW1zCgppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKSB7CiAgLy9tYWtlIHN0YWxsbWFuIHByb3VkIQoKICByZXR1cm4gMDsKfQ==
EOF
)

if [[ "$1" == "-m" || "$1" == "--make-defaults" ]]; then
  mkd_path=$2
  mkd_path=${mkd_path:=~/.config/np/defaults.json}
  echo $defaults_json | base64 -d >> $mkd_path
  printf "Wrote new defaults file \033[38;2;241;255;71m$mkd_path\033[0m"
  xit
fi

defaults_path=~/.config/np/defaults.json # Default defaults.json path



if [ -f "$rootdir/.np/project.json" ]; then
  printf "\033[38;2;255;141;250mRegenerating build script...\033[0m\n"
  rm -rfv .np
  printf "\nI deleted the .np directory for you, run me again!\n"
  xit
fi

printf "No project exists in your current working directory. Would you like to create a new one? \033[1m[Y/n]\033[0m "
read -n 1 -r
if [[ $REPLY =~ ^[Nn]$ ]]; then
  printf "\nThen why did you launch this script???\n"
  xit
fi
if [[ $REPLY =~ ^[Yy]$ ]]; then
  mkdir -p .np
  echo $project_json | base64 -d >> .np/project.json # Extract project.json
  printf "\n\n\033[38;2;57;255;60m.np/project.json\033[0m written successfully.\n"
  #mkdir -p src
  #echo $template_cpp | base64 -d >> src/main.cpp # Extract main.cpp
  printf "\033[38;2;57;237;255msrc/main.cpp\033[0m written successfully.\n"
  [ -f $defaults_path ] && {
    if [[ $dontusedefaults != 1 ]]; then
      printf "Attempting to F&R with default values from \033[38;2;241;255;71m$defaults_path\033[0m...\n\n"
      cd .np

      # Project name
      d_projectname=$(jq -r '.d_projectname' $defaults_path)
      if [[ $d_projectname != "null" ]]; then
        jq --tab --arg d_projectname "$d_projectname" '.projectname = $d_projectname' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mproject name\033[0m\n"

      # C standard version
      d_cstdversion=$(jq -r '.d_cstdversion' $defaults_path)
      if [[ $d_cstdversion != "null" ]]; then
        jq --tab --arg d_cstdversion "$d_cstdversion" '.cstdversion = $d_cstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mC standard version\033[0m\n"

      # C++ standard version
      d_cppstdversion=$(jq -r '.d_cppstdversion' $defaults_path)
      if [[ $d_cppstdversion != "null" ]]; then
        jq --tab --arg d_cppstdversion "$d_cppstdversion" '.cppstdversion = $d_cppstdversion' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mC++ standard version\033[0m\n"

      # Number of compilation threads
      d_threads=$(jq -r '.d_threads' $defaults_path)
      if [[ $d_threads != "null" ]]; then
        jq --tab --argjson d_threads "$d_threads" '.threads = $d_threads' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mNumber of compilation threads\033[0m\n"

      # VSCode integration toggle
      d_vscodeintegration=$(jq -r '.d_vscodeintegration' $defaults_path)
      if [[ $d_vscodeintegration == "true" ]]; then
        jq --tab '.vscodeintegration = true' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      else
        jq --tab '.vscodeintegration = false' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mVSCode integration toggle\033[0m\n"

      # VSCode projects folder
      d_vscodefolder=$(jq -r '.d_vscodefolder' $defaults_path)
      if [[ $d_vscodefolder != "null" ]]; then
        jq --tab --arg d_vscodefolder "$d_vscodefolder" '.vscodefolder = $d_vscodefolder' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
      fi
      printf "Finished configuring \033[1mVSCode project settings folder\033[0m\n"

      # Build configurations (the hard part)
      if [[ $(jq --tab '.d_configurations[0]' $defaults_path) != "null" ]]; then
        jq '.configurations = []' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json # Remove the default template configuration if we have defaults.
      fi
      n_iter=-1 # jq array starts with 0, so initialize it wth -1 because it increments every time the loop is executed.
      while true; do
        n_iter=$((n_iter+1))
        if [[ $(jq --tab --arg n_iter $n_iter '.d_configurations[$n_iter|tonumber]' $defaults_path) != "null" ]]; then
          printf "Copying \033[1mbuild configuration\033[0m #$n_iter...\n"
          ext_config=$(jq --tab --arg n_iter $n_iter '.d_configurations[$n_iter|tonumber]' $defaults_path)
          jq --tab --argjson ext_config "$ext_config" '.configurations += [$ext_config]' project.json >> project_tmp.json && rm project.json && mv project_tmp.json project.json
        else
          echo "No build configurations left to copy."
          break
        fi
      done
      sed -i "s/\"d_/\"/g" project.json # Remove the d_ prefix from all values
    fi
  }
  printf "\n\033[38;2;12;255;34mYour project has been created!\033[0m Use \033[38;2;247;255;30m.np/project.json\033[0m to configure your project. Use \033[38;2;128;255;57mnp -d\033[0m to get documentation about the project configuration file.\nRun \033[38;2;128;255;57mnp -r\033[0m to generate a build script. To build your project, just run the script.\nRemember, you have to regenerate the build script every time you edit \033[38;2;247;255;30m.np/project.json\033[0m!\n"
  xit
fi

printf "\033[0m"
exit 0